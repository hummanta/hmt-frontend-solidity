use crate::ast::*;
use crate::error::LexicalError;
use crate::token::Token;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token, LexicalError>>);

pub Program: Program = {
    SourceUnit* => Program(<>)
}

SourceUnit: SourceUnit = {
    PragmaDirective => SourceUnit::PragmaDirective(<>.into()),
    ContractDefinition => SourceUnit::ContractDefinition(<>),
}

PragmaDirective: PragmaDirective = {
    "pragma" <i:Identifier> <comp:VersionComparator1+> ";" => {
        PragmaDirective::Version(i, comp)
    }
}

VersionComparator1: VersionComparator = {
    <left:VersionComparator1> "||" <right:VersionComparator> => VersionComparator::Or {
        left: left.into(),
        right: right.into()
    },
    VersionComparator
}

VersionComparator: VersionComparator = {
    <version:Version> => VersionComparator::Plain {version},
    <op:VersionOp> <version:Version> => VersionComparator::Operator { op, version },
    <from:Version> "-" <to:Version> => VersionComparator::Range { from, to },
}

Version: String = {
    <v: number> => v.to_string()
}

VersionOp: VersionOp = {
    "=" => VersionOp::Exact,
    ">" => VersionOp::Greater,
    ">=" => VersionOp::GreaterEq,
    "<" => VersionOp::Less,
    "<=" => VersionOp::LessEq,
    "~" => VersionOp::Tilde,
    "^" => VersionOp::Caret,
    "*" => VersionOp::Wildcard,
}

ContractDefinition: Box<ContractDefinition> = {
    <ty:ContractTy> <name:Identifier> "{" "}" => {
        Box::new(ContractDefinition{ ty, name, parts: Vec::new() })
    }
}

ContractTy: ContractTy = {
    "contract" => ContractTy::Contract,
}

Identifier: Identifier = {
    <n:identifier> => Identifier{ name: n.to_string() }
}

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        identifier => Token::Identifier(<String>),
        number => Token::Number(<f64>),

        ";" => Token::Semicolon,
        "{" => Token::OpenCurlyBrace,
        "}" => Token::CloseCurlyBrace,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,

        "=" => Token::Assign,
        "||" => Token::Or,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::More,
        ">=" => Token::MoreEqual,
        "^" => Token::BitwiseXor,
        "-" => Token::Subtract,
        "*" => Token::Mul,
        "~" => Token::BitwiseNot,

        "pragma" => Token::Pragma,
        "contract" => Token::Contract,
    }
}
